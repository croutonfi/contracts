#include "./lib/stdlib.func";
#include "./lib/op-codes.func";
#include "./lib/params.func";
#include "./lib/messages.func";
#include "./lib/common.func";
#include "./lib/tokens.func";
#include "./lib/gas.func";
#include "./lib/upgrades.func";

#include "./liquidity_deposit/storage.func";
#include "./liquidity_deposit/getters.func";

;; we imitate blank contract here in order to allow for 1 msg chain to fully utilise CARRY_REMAINING_GAS
() handle_inititalize(slice in_msg_body) impure inline {
    {-TLB
        initialize#0xbe5a7595 query_id:uint64 code:^Cell fwd_msg_payload:(Maybe ^Cell) = InitializeMsgBody;
    -}
    in_msg_body~load_ref(); ;; skip code

    cell fwd_msg_payload = in_msg_body~load_maybe_ref();

    if(~(fwd_msg_payload.cell_null?())) {
        var msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable)
            .store_slice(my_address())
            .store_coins(0)
            .store_msgbody_prefix_ref(
                fwd_msg_payload
            );

        send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
    }
}

{-TLB
    deposit_all#0x6f875dec query_id:uint64 min_shares_out:(VarUInteger 16)
-}
() handle_deposit_all(int query_id, int min_shares_out) impure inline_ref {
    {-TLB
        $_ token:Token balance:(VarUInteger 128) next_asset:(Maybe ^LiquidityDepositStorage) = LiquidityDepositAssets;
        update_reserves#0xe8824c87 query_id:uint64 owner_address:MsgAddress assets:(^LiquidityDepositAssets) min_shares_out:(VarUInteger 16)
    -}

    cell msg_body = begin_cell()
        .store_op(op::update_reserves)
        .store_query_id(query_id)
        .store_slice(storage::owner_address)
        .store_ref(storage::assets)
        .store_coins(min_shares_out)
        .end_cell();

    builder msg = begin_cell()
        .store_msg_flag(msg_flag::non_bounceable)
        .store_slice(storage::pool_address)
        .store_coins(0)
        .store_msgbody_prefix_ref(msg_body);

    send_raw_message(msg.end_cell(), SELFDESTRUCT_ON_EMPTY | CARRY_REMAINING_BALANCE);
}

{-TLB
    deposit_notification#0xa6589976 query_id:uint64
        token:Token amount:(VarUInteger 16) expected_tokens_count:uint8 min_shares_out:(VarUInteger 16)
        DepositNotificationMsgBody;
-}
() handle_deposit_notification(int query_id, slice in_msg_body) impure inline {
    slice token = in_msg_body~load_token();
    int token_amount = in_msg_body~load_coins();
    int expected_tokens_count = in_msg_body~load_uint(8);

    int i = 0;

    int current_token_balance = 0;
    int current_token_index = -1;

    repeat(tlen(storage::tokens)) {
        if(equal_slice_bits(storage::tokens.at(i), token)) {
            current_token_index = i;
            current_token_balance = storage::balances.at(i);
        }

        i += 1;
    }

    if(current_token_index == -1) {
        storage::tokens~tpush(token);
        storage::balances~tpush(token_amount);
    } else {
        storage::balances~tset(current_token_index, current_token_balance + token_amount);
    }

    save_storage();

    if ((expected_tokens_count != 0) & (tlen(storage::tokens) >= expected_tokens_count)) {
        int min_shares_out = in_msg_body~load_coins();
        return handle_deposit_all(query_id, min_shares_out);
    }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    force_chain(sender_address);

    int op = in_msg_body~load_op();
    int query_id = in_msg_body~load_query_id();

    load_storage();

    if(op == op::initialize) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, storage::factory_address));

        handle_inititalize(in_msg_body);

        return ();
    }

    if (op == op::deposit_notification) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, my_address()));

        handle_deposit_notification(query_id, in_msg_body);

        return ();
    }

    if(op == op::deposit_all) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, storage::owner_address));
        throw_if(error::no_tokens_deposited, storage::assets.cell_null?());

        throw_unless(error::not_enough_tons, msg_value >= deposit_all_fee());

        handle_deposit_all(query_id, in_msg_body~load_coins());

        return ();
    }

    if(op == op::upgrade) {
        throw_unless(error::caller_not_authorized, equal_slice_bits(sender_address, storage::factory_address));

        handle_upgrade(in_msg_body);

        return ();
    }

    throw(error::unknown_op);
}
