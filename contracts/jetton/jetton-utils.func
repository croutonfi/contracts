#include "../lib/params.func";

const int ONE_TON = 100;

cell pack_jetton_wallet_data (int balance, slice owner, slice jetton_master, cell token_wallet_code) inline {
    return  begin_cell()
            .store_grams(balance)
            .store_slice(owner)
            .store_slice(jetton_master)
            .store_ref(token_wallet_code)
            .end_cell();
}

{-TLB
    _ split_depth:(Maybe (## 5)) special:(Maybe TickTock)
      code:(Maybe ^Cell) data:(Maybe ^Cell)
      library:(HashmapE 256 SimpleLib) = StateInit;
-}
cell calculate_jetton_wallet_state_init (slice owner, slice jetton_master, cell code) inline {
    return begin_cell()
            .store_uint(0,1 + 1) ;; split_depth (Maybe = 0) and special (Maybe = 0)
            .store_maybe_ref(code)
            .store_maybe_ref(pack_jetton_wallet_data(0, owner, jetton_master, code))
            .store_uint(0,1) ;; libraries - empty cell
            .end_cell();
}

(slice) calc_user_wallet (slice owner, slice jetton_master, cell code) inline {
    return calc_address(calculate_jetton_wallet_state_init(owner, jetton_master, code));
}


() send_jetton_payout(
    int   query_id,
    slice to,
    slice jetton_wallet_address,
    int   jetton_amount,
    int   fwd_amount,
    cell  fwd_payload
) impure inline_ref {
    var msg_body = begin_cell()
        .store_op(op::transfer)
        .store_query_id(query_id)
        .store_coins(jetton_amount)
        .store_slice(to)
        .store_slice(to) ;; response_destination
        .store_maybe_ref(null())
        .store_coins(fwd_amount)
        .store_maybe_ref(fwd_payload)
        .end_cell();

    var msg = begin_cell()
        .store_msg_flag(msg_flag::non_bounceable) ;; we should not bounce here cause receiver can have uninitialized contract
        .store_slice(jetton_wallet_address)
        .store_coins(0)
        .store_msgbody_prefix_ref(msg_body)
        .end_cell();

   send_raw_message(msg, CARRY_REMAINING_GAS);
}
