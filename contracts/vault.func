#include "./lib/stdlib.func";
#include "./lib/params.func";
#include "./lib/common.func";
#include "./lib/op-codes.func";
#include "./lib/error-codes.func";
#include "./lib/messages.func";
#include "./lib/helpers.func";
#include "./lib/gas.func";
#include "./lib/upgrades.func";

#include "./vault/common.func";
#include "./jetton/jetton-utils.func";

{-TLB
    Storage
    $_ factory_address:MsgAddress contract_type:(## 8) token:Token jetton_wallet_address:MsgAddress = JettonVaultStorage;
-}

global slice storage::jetton_wallet_address;

() load_storage() impure inline {
    slice ds = get_data().begin_parse();

    storage::factory_address = ds~load_msg_addr();
    storage::contract_type = ds~load_uint(8);
    storage::token = ds~load_token();
    storage::jetton_wallet_address = ds~load_msg_addr();
}

() save_storage() impure inline {
    set_data(
        begin_cell()
            .store_slice(storage::factory_address)
            .store_uint(storage::contract_type, 8)
            .store_slice(storage::token)
            .store_slice(storage::jetton_wallet_address)
        .end_cell()
    );
}

#include "./vault/getters.func";

{-TLB init#0x4990564c query_id:uint64 = InitMsgBody; -}
() init(int query_id) impure {
    (_, slice jetton_master_address) = storage::token.parse_token();

    var msg = begin_cell()
        .store_msg_flag(msg_flag::non_bounceable)
        .store_slice(jetton_master_address)
        .store_coins(0)
        .store_msgbody_prefix_ref(
            begin_cell()
                .store_uint(op::provide_wallet_address, 32)
                .store_uint(query_id, 64)
                .store_slice(my_address())
                .store_uint(1, 1)
            .end_cell()
        );

    send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
}

{-TLB take_wallet_address#0xd1735400 query_id:uint64 wallet_address:MsgAddress owner_address:(Maybe ^MsgAddress) = TakeWalletAddressMsgBody;  -}
() take_wallet_address(slice in_msg_body) impure {
    var wallet_address = in_msg_body~load_msg_addr();
    force_chain(wallet_address);

    storage::jetton_wallet_address = wallet_address;

    save_storage();
}

{-TLB
    swap_params#_ recipient:MsgAddress deadline:uint64 success_payload:Maybe(^Cell) fail_payload:Maybe(^Cell) = SwapParams;
    swap_step#_ pool:MsgAddress to_token:Token limit:(VarUInteger 16) next:Maybe(^SwapStep) = SwapStep;
    swap#0x25938561 steps:^SwapStep params:^SwapParams = JettonOpMsgBody;

    add_liquidity#0x406d7624 pool_address:MsgAddress = JettonOpMsgBody;

    transfer_notification#0x7362d09c
        query_id:uint64 amount:(VarUInteger 16) from_address:MsgAddress
        forward_payload:(Maybe ^JettonOpMsgBody) = TransferNotificationMsgBody;
-}
() transfer_notification(slice sender_address, int query_id, slice in_msg_body, int msg_value, int my_balance) impure {
    int jetton_amount = in_msg_body~load_coins();
    slice owner_address = in_msg_body~load_msg_addr();

    if(~(equal_slice_bits(sender_address, storage::jetton_wallet_address))) {
        send_jetton_payout(query_id, owner_address, sender_address, jetton_amount, 0, null());
        return ();
    }

    cell fwd_msg_payload = in_msg_body~load_maybe_ref();

    if(fwd_msg_payload.cell_null?()) {
        send_jetton_payout(query_id, owner_address, sender_address, jetton_amount, 0, null());
        return ();
    }

    slice fs = fwd_msg_payload.begin_parse();
    int op = fs~load_op();

    if(op == op::add_liquidity) {
        if(msg_value >= vault_add_liquidity_fee()) {
            handle_add_liquiditiy(query_id, owner_address, jetton_amount, fs, 0, CARRY_REMAINING_GAS);
            return ();
        }
    }

    if(op == op::swap) {
        if(msg_value >= vault_swap_fee()) {
            handle_swap(query_id, owner_address, jetton_amount, fs, 0, CARRY_REMAINING_GAS);
            return ();
        }
    }

    send_jetton_payout(query_id, owner_address, sender_address, jetton_amount, 0, null());

    return ();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    force_chain(sender_address);

    int op = in_msg_body~load_op();
    int query_id = in_msg_body~load_query_id();

    load_storage();

    if (op == op::init_vault) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, my_address()));
        init(query_id);

        return ();
    }

    if (op == op::take_wallet_address) {
        (_, slice jetton_master_address) = storage::token.parse_token();
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, jetton_master_address));
        take_wallet_address(in_msg_body);

        return ();
    }

    if (op == op::payout) {
        (slice to, int jetton_amount, cell fwd_payload) = parse_and_validate_payout(sender_address, in_msg_body);

        int fwd_amount = 0;
        int computed_payout_fee = payout_fee();

        if(~(fwd_payload.cell_null?())) {
            throw_unless(error::not_enough_tons, msg_value > computed_payout_fee);

            fwd_amount = msg_value - computed_payout_fee;
        }

        send_jetton_payout(query_id, to, storage::jetton_wallet_address, jetton_amount, fwd_amount, fwd_payload);

        return ();
    }

    if (op == op::transfer_notification) {
        transfer_notification(sender_address, query_id, in_msg_body, msg_value, my_balance);

        return ();
    }

    if(op == op::withdraw_jettons) {
        throw_unless(error::caller_not_authorized, equal_slice_bits(sender_address, storage::factory_address));

        handle_withdraw_jettons(query_id, in_msg_body);

        return ();
    }

    if(op == op::withdraw_tons) {
        throw_unless(error::caller_not_authorized, equal_slice_bits(sender_address, storage::factory_address));

        handle_withdraw_tons(query_id, in_msg_body);

        return ();
    }

    if(op == op::upgrade) {
        throw_unless(error::caller_not_authorized, equal_slice_bits(sender_address, storage::factory_address));

        handle_upgrade(in_msg_body);

        return ();
    }

    throw(error::unknown_op);
}
