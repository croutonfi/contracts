#include "./assets.func";

global slice storage::factory_address;
global int storage::contract_type;

global cell storage::shares_wallet_code;
global cell storage::content;

global int storage::n_coins;
global tuple storage::tokens;
global tuple storage::rates;
global tuple storage::precisions;
global tuple storage::balances;
global tuple storage::admin_fee_balances;

global int storage::total_supply;
global int storage::fee;
global int storage::admin_fee;

global int storage::initial_A;
global int storage::future_A;
global int storage::initial_A_time;
global int storage::future_A_time;

global slice storage::oracle_address;

{-TLB
    Storage
    $_ asset:Asset reserve:uint64 next_asset:(Maybe ^Cell) = AssetLinked;
    $_ factory_address:MsgAddress contract_type:uint8
        initial_A:uint32 future_A:uint32 initial_A_time:uint64 future_A_time:uint64
        fee:uint64 admin_fee:uint64 assets:AssetLinked rates:^(VarUInteger 32 (VarUInteger 128)) shares_wallet_code:^Cell = PoolStorage;
-}

() load_storage() impure inline {
    slice ds = get_data().begin_parse();

    storage::factory_address = ds~load_msg_addr();
    storage::contract_type = ds~load_uint(8);

    storage::initial_A = ds~load_uint(32);
    storage::future_A = ds~load_uint(32);
    storage::initial_A_time = ds~load_uint(64);
    storage::future_A_time = ds~load_uint(64);

    storage::fee = ds~load_uint(64);
    storage::admin_fee = ds~load_uint(64);
    storage::total_supply = ds~load_coins();

    (
        storage::tokens,
        storage::precisions,
        storage::balances,
        storage::admin_fee_balances
    ) = deserialize_pool_assets(ds~load_ref());
    storage::rates = deserialize_pool_rates(ds~load_dict());
    storage::oracle_address = ds~load_msg_addr();

    storage::n_coins = tlen(storage::tokens);
    storage::shares_wallet_code = ds~load_ref();
    storage::content = ds~load_ref();
}

() save_storage() impure inline_ref {
    set_data(
        begin_cell()
            .store_slice(storage::factory_address)
            .store_uint(storage::contract_type, 8)
            .store_uint(storage::initial_A, 32)
            .store_uint(storage::future_A, 32)
            .store_uint(storage::initial_A_time, 64)
            .store_uint(storage::future_A_time, 64)
            .store_uint(storage::fee, 64)
            .store_uint(storage::admin_fee, 64)
            .store_coins(storage::total_supply)
            .store_ref(
                serialize_pool_assets(
                    storage::tokens,
                    storage::precisions,
                    storage::balances,
                    storage::admin_fee_balances
                )
            )
            .store_dict(serialize_pool_rates(storage::rates))
            .store_slice(storage::oracle_address)
            .store_ref(storage::shares_wallet_code)
            .store_ref(storage::content)
        .end_cell()
    );
}
